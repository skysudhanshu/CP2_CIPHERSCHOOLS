class Solution {
public:
    void dfs(vector<vector<int>> &ans,vector<int> &combo,int index,int k,int target)
    {
        if(target<0 || combo.size()>k)
            return;
        if(target==0 && combo.size()==k)
        {
            ans.push_back(combo);
            return;
        }
        for(int i=index;i<10;i++)
        {
            if(i>target)
                break;
            combo.push_back(i);
            dfs(ans,combo,i+1,k,target-i);
            combo.pop_back();
        }
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> combo;
        vector<vector<int>> ans;
        dfs(ans,combo,1,k,n);
        return ans;
    }
};
